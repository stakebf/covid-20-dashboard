[{"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\index.js":"1","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\store\\index.js":"2","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\App\\index.js":"3","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\reducers\\index.js":"4","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\actions\\index.js":"5","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\AppWrapper\\index.js":"6","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Header\\index.js":"7","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Footer\\index.js":"8","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\ErrorStub\\index.js":"9","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\services\\WorldometrsService.js":"10","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\countriesCoordinates.js":"11","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\actions\\actionTypes.js":"12","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getProvinceMap.js":"13","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MapContainer.jsx":"14","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\GlobalCases\\GlobalCases.jsx":"15","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\CasesByCity\\CasesContainer.jsx":"16","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tabs\\index.js":"17","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Chart\\index.js":"18","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\AllKindsOfCases\\index.js":"19","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getInfoAboutCountry.js":"20","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\tabsNames.js":"21","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\chartConfig.js":"22","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\chartHelpers.js":"23","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\GlobalCases\\SearchInput.jsx":"24","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\CasesByCity\\CasesItem.jsx":"25","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getStatistics.js":"26","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MapProvider.jsx":"27","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\Legend.jsx":"28","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Preloader\\index.js":"29","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\index.js":"30","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\controller\\listeners.js":"31","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\view\\keyboard.js":"32","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\view\\renderKeyboardKeys.js":"33","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\model\\toggleCaps.js":"34","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\model\\shift.js":"35","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\model\\audio.js":"36"},{"size":295,"mtime":1608735608182,"results":"37","hashOfConfig":"38"},{"size":604,"mtime":1608062054171,"results":"39","hashOfConfig":"38"},{"size":1039,"mtime":1608762375642,"results":"40","hashOfConfig":"38"},{"size":1744,"mtime":1608746223488,"results":"41","hashOfConfig":"38"},{"size":3369,"mtime":1608735670212,"results":"42","hashOfConfig":"38"},{"size":2165,"mtime":1608755813118,"results":"43","hashOfConfig":"38"},{"size":238,"mtime":1608746223461,"results":"44","hashOfConfig":"38"},{"size":760,"mtime":1608746223459,"results":"45","hashOfConfig":"38"},{"size":659,"mtime":1608751962251,"results":"46","hashOfConfig":"38"},{"size":1513,"mtime":1608735670215,"results":"47","hashOfConfig":"38"},{"size":26503,"mtime":1608735608185,"results":"48","hashOfConfig":"38"},{"size":672,"mtime":1608735670212,"results":"49","hashOfConfig":"38"},{"size":238,"mtime":1608062054169,"results":"50","hashOfConfig":"38"},{"size":5458,"mtime":1608761105655,"results":"51","hashOfConfig":"38"},{"size":1088,"mtime":1608768325445,"results":"52","hashOfConfig":"38"},{"size":4587,"mtime":1608763448064,"results":"53","hashOfConfig":"38"},{"size":1575,"mtime":1608758808961,"results":"54","hashOfConfig":"38"},{"size":1216,"mtime":1608749776676,"results":"55","hashOfConfig":"38"},{"size":2020,"mtime":1608766003064,"results":"56","hashOfConfig":"38"},{"size":1315,"mtime":1608735670211,"results":"57","hashOfConfig":"38"},{"size":176,"mtime":1608735608185,"results":"58","hashOfConfig":"38"},{"size":1716,"mtime":1608768441123,"results":"59","hashOfConfig":"38"},{"size":4520,"mtime":1608746764843,"results":"60","hashOfConfig":"38"},{"size":1565,"mtime":1608768203672,"results":"61","hashOfConfig":"38"},{"size":2415,"mtime":1608746657526,"results":"62","hashOfConfig":"38"},{"size":136,"mtime":1608735608181,"results":"63","hashOfConfig":"38"},{"size":2408,"mtime":1608754131435,"results":"64","hashOfConfig":"38"},{"size":1742,"mtime":1608735608172,"results":"65","hashOfConfig":"38"},{"size":318,"mtime":1608762357492,"results":"66","hashOfConfig":"38"},{"size":304,"mtime":1608762357485,"results":"67","hashOfConfig":"38"},{"size":12956,"mtime":1608762357485,"results":"68","hashOfConfig":"38"},{"size":1404,"mtime":1608762357490,"results":"69","hashOfConfig":"38"},{"size":5095,"mtime":1608762357491,"results":"70","hashOfConfig":"38"},{"size":264,"mtime":1608762357489,"results":"71","hashOfConfig":"38"},{"size":1511,"mtime":1608762357489,"results":"72","hashOfConfig":"38"},{"size":578,"mtime":1608762357487,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d99sxb",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"80"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\store\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\App\\index.js",[],["152","153"],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\reducers\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\actions\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\AppWrapper\\index.js",["154"],"import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport GlobalCases from '../Tables/GlobalCases/GlobalCases';\r\nimport CasesContainer from '../Tables/CasesByCity/CasesContainer';\r\nimport Map from '../Tables/Map/MapContainer';\r\nimport GroupedTabs from '../Tabs';\r\nimport AllKindsOfCases from '../Tables/AllKindsOfCases';\r\nimport Charts from '../Chart';\r\n\r\nimport classes from './AppWrapper.module.scss';\r\n\r\nconst AppWrapper = ({ byAllCases, byCountries, activeCountry }) => {\r\n  const [parameters, setParameters] = useState({\r\n    globalCases: 'cases',\r\n    casesSelected: 'Cases by country'\r\n  });\r\n\r\n  const [statisticField, setStatisticField] = useState({\r\n    category: 'confirmed',\r\n    timePeriod: 'total'\r\n  });\r\n\r\n  const commonCaregories = ['confirmed', 'deaths', 'recovered'];\r\n  const timeCategories = ['total', 'today', 'total/100', 'today/100'];\r\n\r\n  return (\r\n    <main className={classes.main__container}>\r\n      <section className={classes.global__container}>\r\n        <GlobalCases casesType={parameters.globalCases} />\r\n        <CasesContainer title={parameters.casesSelected} countries={byCountries} />\r\n      </section>\r\n      <section className={classes.map__container}>\r\n        <Map stat={statisticField} byAllCases={byAllCases} cases={byCountries} pickedCountry={activeCountry} />\r\n        <div className={'map__tab-container'}>\r\n        <GroupedTabs styleClass={'mapTab'} type={'category'} country={activeCountry} setStatisticField={setStatisticField} statisticField={statisticField} tabValues={commonCaregories} />\r\n        <GroupedTabs styleClass={'mapTab'} type={'timePeriod'} country={activeCountry} setStatisticField={setStatisticField} statisticField={statisticField} tabValues={timeCategories} />\r\n        </div>\r\n      </section>\r\n      <section className={'allCases__container'}>\r\n        <AllKindsOfCases />\r\n        <Charts />\r\n      </section>\r\n\r\n    </main>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    byAllCases: state.byAllCases,\r\n    byCountries: state.byCountries,\r\n    activeCountry: state.activeCountry\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AppWrapper);\r\n","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Header\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Footer\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\ErrorStub\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\services\\WorldometrsService.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\countriesCoordinates.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\actions\\actionTypes.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getProvinceMap.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MapContainer.jsx",["155"],"import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Popup, CircleMarker, useMap } from 'react-leaflet'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Legend from './Legend';\r\nimport MapProvider from './MapProvider';\r\nimport { getStatistics } from '../../../helpers/getStatistics';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './map.scss';\r\n\r\nlet index = 0;\r\nconst DEFAULT_LOCATION = [53.90033950661763, 27.562463259670654];\r\nconst ZOOM = 1.5;\r\n\r\nconst useStyles = makeStyles({\r\n    mapContainer: {\r\n        backgroundColor: '#2c2c2c',\r\n        margin: '0 auto',\r\n        height: 'calc(100% - 100px)',\r\n        width: '100%',\r\n        gridColumn: '2'\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n});\r\n\r\nconst getColor = num => {\r\n    return num > 1000000\r\n        ? \"#BD0026\"\r\n        : num > 500000\r\n            ? \"#E31A1C\"\r\n            : num > 100000\r\n                ? \"#FC4E2A\"\r\n                : num > 50000\r\n                    ? \"#FD8D3C\"\r\n                    : num > 10000\r\n                        ? \"#FEB24C\"\r\n                        : num > 1000\r\n                            ? \"#dfdc15\"\r\n                            : \"#4ddb0b\";\r\n}\r\n\r\nfunction Map({ stat, cases, pickedCountry }) {\r\n    const coords = Object.keys(pickedCountry).length ? [pickedCountry.countryInfo.lat, pickedCountry.countryInfo.long] : DEFAULT_LOCATION;\r\n    const [isNewLocation, setIsNewLocation] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsNewLocation(true);\r\n    }, [pickedCountry]);\r\n\r\n    const classes = useStyles();\r\n    const fillOptions = (color) => {\r\n        return {\r\n            fillColor: color,\r\n            color: color,\r\n            fillOpacity: 0.5\r\n        }\r\n    };\r\n\r\n    function getStaticticsValue(item) {\r\n        const { category, timePeriod } = stat;\r\n        const statType = category === 'confirmed' ? 'cases' : category.toString();\r\n        let staticticValue = timePeriod.includes('today') ? item[`today${statType.charAt(0).toUpperCase() + statType.slice(1)}`] : item[statType];\r\n\r\n        if (timePeriod.includes('100')) {\r\n            staticticValue = getStatistics(staticticValue, item.population);\r\n        }\r\n\r\n        return staticticValue;\r\n    };\r\n\r\n    function renderProvinceMarker(item) {\r\n        const { category, timePeriod } = stat;\r\n        const center = [item.coordinates.latitude, item.coordinates.longitude];\r\n        let staticticValue = getStaticticsValue(item);\r\n        const backColor = getColor(staticticValue);\r\n        return <CircleMarker\r\n            eventHandlers={{\r\n                mouseover: (e) => {\r\n                    e.target.openPopup();\r\n                },\r\n                mouseout: (e) => {\r\n                    e.target.closePopup();\r\n                }\r\n            }}\r\n            center={center}\r\n            pathOptions={fillOptions(backColor)}\r\n            radius={1 * 5}\r\n            key={`${item.coordinates.latitude}_${++index}`}>\r\n            <Popup>\r\n                {`${category} ${timePeriod}`}:{item.stats[category]}\r\n                <br />\r\n                {pickedCountry.country}, {item.province}\r\n            </Popup>\r\n        </CircleMarker>\r\n    };\r\n\r\n    function renderCountryMarker(item, stat, idx, radius) {\r\n        const { category, timePeriod } = stat;\r\n        let staticticValue = getStaticticsValue(item);\r\n        const center = [item.countryInfo.lat, item.countryInfo.long];\r\n        const backColor = getColor(staticticValue);\r\n        return <CircleMarker\r\n            eventHandlers={{\r\n                mouseover: (e) => {\r\n                    e.target.openPopup();\r\n                },\r\n                mouseout: (e) => {\r\n                    e.target.closePopup();\r\n                }\r\n            }}\r\n\r\n            center={center}\r\n            pathOptions={fillOptions(backColor)}\r\n            radius={radius ? radius : 1 * 5}\r\n            key={++index}>\r\n            <Popup>\r\n                {`${category} ${timePeriod}`}:{staticticValue}\r\n                <br />\r\n                {item.country}\r\n            </Popup>\r\n        </CircleMarker>\r\n    };\r\n\r\n    function FlyToLocation({ item, stat }) {\r\n        const map = useMap();\r\n        useEffect(() => {\r\n            map.flyTo([item.countryInfo.lat, item.countryInfo.long], 5);\r\n            setIsNewLocation(false);\r\n        }, []);\r\n\r\n        return renderCountryMarker(item, stat, null, 10);\r\n    };\r\n\r\n    return (\r\n        < MapContainer className={classes.mapContainer} center={coords} minZoom={1} zoom={ZOOM} scrollWheelZoom={true}>\r\n            {Object.keys(pickedCountry).length && isNewLocation ? <FlyToLocation position={coords} item={pickedCountry} stat={stat} /> : null}\r\n            <MapProvider />\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\r\n                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n            />\r\n            {cases.map((item, idx) => {\r\n                if (item.provinces !== null) {\r\n                    return item.provinces.map((provence) => renderProvinceMarker(provence))\r\n                }\r\n                return renderCountryMarker(item, stat, idx)\r\n            })}\r\n            <Legend />\r\n        </MapContainer >\r\n    )\r\n}\r\n\r\nexport default React.memo(Map);\r\n","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\GlobalCases\\GlobalCases.jsx",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\CasesByCity\\CasesContainer.jsx",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tabs\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Chart\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\AllKindsOfCases\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getInfoAboutCountry.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\tabsNames.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\chartConfig.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\chartHelpers.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\GlobalCases\\SearchInput.jsx",["156"],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\CasesByCity\\CasesItem.jsx",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getStatistics.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MapProvider.jsx",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\Legend.jsx",["157"],"import { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { useEffect } from \"react\";\r\nimport classes from './MapContainer.module.scss';\r\n\r\nconst Legend = () => {\r\n    const map = useMap();\r\n    console.log(map);\r\n\r\n    useEffect(() => {\r\n        const getColor = num => {\r\n            console.log(num > 10000, num, '800026')\r\n            return num > 1000000\r\n                ? \"#BD0026\"\r\n                : num > 500000\r\n                    ? \"#E31A1C\"\r\n                    : num > 100000\r\n                        ? \"#FC4E2A\"\r\n                        : num > 50000\r\n                            ? \"#FD8D3C\"\r\n                            : num > 10000\r\n                                ? \"#FEB24C\"\r\n                                : num > 1000\r\n                                    ? \"#dfdc15\"\r\n                                    : \"#4ddb0b\";\r\n        }\r\n\r\n        const legend = L.control({ position: \"bottomright\" });\r\n\r\n        legend.onAdd = () => {\r\n            const div = L.DomUtil.create(\"div\", \"info legend\");\r\n            const grades = [0, 1000, 10000, 50000, 100000, 500000, 1000000];\r\n            let labels = [];\r\n            let from;\r\n            let to;\r\n\r\n            for (let i = 0; i < grades.length; i++) {\r\n                from = grades[i];\r\n                to = grades[i + 1];\r\n                labels.push(\r\n                    `<div class=${classes.label__item}><span style=\"background:${getColor(from + 1)}\" class=${classes.label__color}></span><span> ${to ? to : +grades[i]}</span></div>`\r\n                );\r\n            }\r\n            div.innerHTML = labels.join(\"<br>\");\r\n            return div;\r\n        };\r\n\r\n        legend.addTo(map);\r\n    }, []);\r\n    return null;\r\n};\r\n\r\nexport default Legend;\r\n","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Preloader\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\controller\\listeners.js",["158","159","160","161","162"],"import getShiftValue from '../model/shift';\r\nimport toggleCapsLock from '../model/toggleCaps';\r\nimport renderKeyBoard from '../view/renderKeyboardKeys';\r\nimport makeSound from '../model/audio';\r\n\r\nconst state = {\r\n    isShift: false,\r\n    lang: 'EN',\r\n    isCaps: false,\r\n    currentCursor: 0,\r\n    content: '',\r\n    isMute: false,\r\n    isHide: true\r\n}\r\n\r\nconst setFocus = () => {\r\n    const keyboardInput = document.querySelector('#outlined-basic');\r\n    keyboardInput.selectionStart = state.currentCursor;\r\n    keyboardInput.selectionEnd = state.currentCursor;\r\n    keyboardInput.focus();\r\n}\r\n\r\nconst listen = (setSearchTerm, searchTerm) => {\r\n    let shift,\r\n        keyElements,\r\n        keyboardInput,\r\n        hide;\r\n\r\n    const init = () => {\r\n        shift = document.querySelector('.keyboard__key--shift');\r\n        keyElements = document.querySelectorAll(\".keyboard__key\");\r\n        keyboardInput = document.querySelector('#outlined-basic');\r\n        hide = document.querySelector('.hide_btn');\r\n    }\r\n    init()\r\n\r\n    const initkeys = () => {\r\n\r\n        keyElements.forEach(key => {\r\n            key.addEventListener(\"click\", (e) => {\r\n                const keyboardInput = document.querySelector('#outlined-basic');\r\n                if (key.classList.contains('caps')) {\r\n                    if (!state.isMute) makeSound('special');\r\n                    clickCaps(key)\r\n                    if (state.isShift) getShiftValue(state.lang, state.isCaps, state.isShift);\r\n                    return;\r\n                } else if (key.classList.contains('backspace')) {\r\n                    if (!state.isMute) makeSound('backpace');\r\n                    if (keyboardInput.value.length === 0) return;\r\n                    const currentArr = keyboardInput.value.split('');\r\n                    currentArr.splice(state.currentCursor - 1, 1);\r\n                    state.content = currentArr.join('');\r\n                    keyboardInput.value = state.content;\r\n                    setSearchTerm(keyboardInput.value);\r\n                    state.currentCursor -= 1;\r\n                    setFocus();\r\n                    return;\r\n                } else if (key.classList.contains('enter')) {\r\n                    if (!state.isMute) makeSound('enter');\r\n                    clickEnter();\r\n                } else if (key.classList.contains('space')) {\r\n                    if (!state.isMute) makeSound(state.lang.toLowerCase());\r\n                    state.content += \" \";\r\n                    keyboardInput.value += \" \";\r\n                    state.currentCursor += 1;\r\n                    setSearchTerm(keyboardInput.value);\r\n                    setFocus();\r\n                } else if (key.classList.contains('left-arrow')) {\r\n                    if (!state.isMute) makeSound(state.lang.toLowerCase());\r\n                    if (state.currentCursor !== 0) {\r\n                        state.currentCursor -= 1;\r\n                    }\r\n                    setFocus();\r\n                } else if (key.classList.contains('right-arrow')) {\r\n                    if (!state.isMute) makeSound(state.lang.toLowerCase());\r\n                    if (state.currentCursor <= keyboardInput.value.length - 1) {\r\n                        state.currentCursor += 1;\r\n                    }\r\n                    setFocus();\r\n                } else if (key.classList.contains('shift')) {\r\n                    key.classList.toggle(\"keyboard__key--active\");\r\n                    if (!state.isMute) makeSound('shift');\r\n                    if (!state.isShift && state.isCaps) {\r\n                        state.isShift = true;\r\n                        renderKeyBoard(state.lang, state.isCaps, state.isMute, state.isShift);\r\n                        init();\r\n                        initkeys();\r\n                        setFocus();\r\n                        getShiftValue(state.lang, state.isCaps, state.isShift);\r\n                        return;\r\n                    } else if (state.isShift) {\r\n                        state.isShift = false;\r\n                        renderKeyBoard(state.lang, state.isCaps, state.isMute, state.isShift);\r\n                        init();\r\n                        initkeys();\r\n                        setFocus();\r\n                        return;\r\n                    } else {\r\n                        state.isShift = true;\r\n                        getShiftValue(state.lang, state.isCaps, state.isShift);\r\n                        setFocus();\r\n                        return;\r\n                    }\r\n\r\n                } else if (key.classList.contains('lang')) {\r\n                    if (!state.isMute) makeSound(state.lang.toLowerCase());\r\n                    if (state.lang === 'EN') {\r\n                        state.lang = 'RU';\r\n                        setFocus();\r\n                    } else {\r\n                        state.lang = 'EN';\r\n                        setFocus();\r\n                    }\r\n                    renderKeyBoard(state.lang, state.isCaps, state.isMute, state.isShift);\r\n                    init();\r\n                    initkeys();\r\n                } else if (key.classList.contains('done')) {\r\n                    if (!state.isMute) makeSound(state.lang.toLowerCase());\r\n                    state.content = \"\";\r\n                    document.querySelector(\".keyboard\").classList.add(\"keyboard--hidden\");\r\n                } else if (key.classList.contains('mute')) {\r\n                    if (!state.isMute) makeSound(state.lang.toLowerCase());\r\n                    key.classList.toggle(\"keyboard__key--active\");\r\n                    state.isMute = !state.isMute;\r\n                }\r\n                if (key.classList.contains('keyboard__key--elem')) {\r\n                    const pressed = document.querySelector('.key__pressed');\r\n                    if (pressed) pressed.classList.remove('key__pressed');\r\n                    if (!state.isMute) makeSound(state.lang.toLowerCase());\r\n                    const currentArr = keyboardInput.value.split('');\r\n                    const value = key.innerHTML === \"&gt;\" ? \">\" : key.innerHTML === \"&lt;\" ? \"<\" : key.innerText;\r\n                    currentArr.splice(state.currentCursor, 0, value);\r\n                    state.content = currentArr.join('');\r\n                    document.querySelector('#outlined-basic').value = state.content;\r\n                    setSearchTerm(keyboardInput.value);\r\n                    state.currentCursor += 1;\r\n                    setFocus();\r\n                }\r\n            });\r\n        });\r\n\r\n        hide.addEventListener('click', () => {\r\n            if (!state.isMute) makeSound(state.lang.toLowerCase());\r\n            state.content = \"\";\r\n            state.isHide = true;\r\n            document.querySelector(\".keyboard\").classList.toggle(\"keyboard--hidden\");\r\n        })\r\n\r\n    }\r\n    initkeys();\r\n\r\n    keyboardInput.addEventListener('click', () => {\r\n        state.currentCursor = keyboardInput.value.length;\r\n        if (state.isHide) {\r\n            state.isHide = false;\r\n            document.querySelector('.keyboard').classList.remove(\"keyboard--hidden\");\r\n        }\r\n        setFocus();\r\n    });\r\n\r\n    keyboardInput.addEventListener('keydown', (e) => {\r\n        const pressed = document.querySelector('.key__pressed');\r\n        if (pressed) pressed.classList.remove('key__pressed');\r\n        const item = setColor(e.key, e.code)\r\n        if (item !== undefined) item.classList.add('key__pressed');\r\n        if (item !== undefined && (item.classList.contains('backspace') || item.classList.contains('keyboard__key--arrow') || item.classList.contains('enter'))) {\r\n            e.preventDefault();\r\n            setFocus();\r\n        }\r\n        if (item !== undefined && item.classList.contains('keyboard__key--elem')) {\r\n            e.preventDefault();\r\n            const currentArr = keyboardInput.value.split('');\r\n            currentArr.splice(state.currentCursor, 0, e.key);\r\n            state.content = currentArr.join('');\r\n            document.querySelector('#outlined-basic').value = state.content;\r\n            setSearchTerm(keyboardInput.value);\r\n            setFocus();\r\n        }\r\n        setFocus();\r\n    })\r\n\r\n\r\n    const clickEnter = () => {\r\n        const keyboardInput = document.querySelector('#outlined-basic');\r\n        const currentArr = keyboardInput.value.split('');\r\n        currentArr.splice(state.currentCursor, 0, \"\\n\");\r\n        state.content += currentArr.join('');\r\n        keyboardInput.value = currentArr.join('');\r\n        setSearchTerm(keyboardInput.value);\r\n        state.currentCursor += 1;\r\n        setFocus();\r\n    }\r\n\r\n    const clickBackSpace = () => {\r\n        const keyboardInput = document.querySelector('#outlined-basic');\r\n        const currentArr = keyboardInput.value.split('');\r\n        currentArr.splice(state.currentCursor - 1, 1);\r\n        state.content = currentArr.join('');\r\n        keyboardInput.value = state.content;\r\n        setSearchTerm(keyboardInput.value);\r\n        state.currentCursor -= 1;\r\n        setFocus();\r\n        return;\r\n    }\r\n\r\n    const clickCaps = (el) => {\r\n        state.isCaps = !state.isCaps;\r\n        toggleCapsLock(state.isCaps)\r\n        el.classList.toggle(\"keyboard__key--active\");\r\n        setFocus();\r\n    }\r\n\r\n    \r\n    const setColor = (elem, elCode) => {\r\n        return Array.from(keyElements).find((el, idx) => {\r\n            if (elem === 'Backspace') {\r\n                if (el.classList.contains('backspace')) {\r\n                    if (keyboardInput.value.length === 0) return;\r\n                    clickBackSpace()\r\n                }\r\n                return el.classList.contains('backspace');\r\n            } else if (elem === 'CapsLock') {\r\n                if (el.classList.contains('caps')) {\r\n                    clickCaps(el);\r\n                    if (state.isShift) getShiftValue(state.lang, state.isCaps, state.isShift);\r\n                }\r\n                return el.classList.contains('caps');\r\n            } else if (elem === \" \") {\r\n                if (el.classList.contains('space')) {\r\n                    state.content += \" \";\r\n                    keyboardInput.value += \" \";\r\n                    state.currentCursor += 1;\r\n                    setFocus();\r\n                }\r\n                return el.classList.contains('space');\r\n            } else if (elem === \"Enter\") {\r\n                if (el.classList.contains('enter')) clickEnter();\r\n                return el.classList.contains('enter');\r\n            } else if (elem === \"Shift\") {\r\n                if (el.classList.contains('shift')) {\r\n                    el.classList.toggle(\"keyboard__key--active\");\r\n                    if (!state.isShift && state.isCaps) {\r\n                        state.isShift = true;\r\n                        renderKeyBoard(state.lang, state.isCaps, state.isMute, state.isShift);\r\n                        init()\r\n                        initkeys()\r\n                        setFocus();\r\n                        getShiftValue(state.lang, state.isCaps, state.isShift);\r\n                        return;\r\n                    } else if (state.isShift) {\r\n                        state.isShift = false;\r\n                        renderKeyBoard(state.lang, state.isCaps, state.isMute, state.isShift);\r\n                        init()\r\n                        initkeys()\r\n                        setFocus();\r\n                        return;\r\n                    } else {\r\n                        state.isShift = true;\r\n                        getShiftValue(state.lang, state.isCaps, state.isShift);\r\n                        setFocus();\r\n                        return;\r\n                    }\r\n                }\r\n                return el.classList.contains('shift');\r\n            } else if (elem === 'ArrowLeft') {\r\n                if (el.classList.contains('left-arrow')) {\r\n                    if (state.currentCursor !== 0) {\r\n                        state.currentCursor -= 1;\r\n                    }\r\n                    setFocus();\r\n                }\r\n                return el.classList.contains('left-arrow');\r\n            } else if (elem === 'ArrowRight') {\r\n                if (el.classList.contains('right-arrow')) {\r\n                    if (state.currentCursor <= keyboardInput.value.length - 1) {\r\n                        state.currentCursor += 1;\r\n                    }\r\n                    setFocus();\r\n                }\r\n                return el.classList.contains('right-arrow');\r\n            } else {\r\n\r\n                if (el.innerHTML.toLowerCase() === elem.toLowerCase() || (`key${el.innerHTML.toLowerCase()}` === elCode.toLowerCase() || `key${elem.toLowerCase()}` === elCode.toLowerCase())) {\r\n                    if (state.currentCursor + 1 === keyboardInput.value.length + 1) {\r\n                        state.currentCursor += 1;\r\n                        setFocus()\r\n                    }\r\n                }\r\n                return el.innerHTML.toLowerCase() === elem.toLowerCase();\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default listen;\r\n","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\view\\keyboard.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\view\\renderKeyboardKeys.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\model\\toggleCaps.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\model\\shift.js",["163"],"const specialsSimbolsEN = {\r\n    '0': ')',\r\n    '1': '!',\r\n    '2': '@',\r\n    '3': '#',\r\n    '4': '$',\r\n    '5': '%',\r\n    '6': '^',\r\n    '7': '&',\r\n    '8': '*',\r\n    '9': '(',\r\n    '-': '_',\r\n    '=': '+',\r\n    '[': '{',\r\n    ']': '}',\r\n    ';': ':',\r\n    '\\'': '\"',\r\n    '\\\\': '|',\r\n    ',': '<',\r\n    '.': '>',\r\n    '/': '?',\r\n}\r\n\r\nconst specialsSimbolsRU = {\r\n    '0': ')',\r\n    '1': '!',\r\n    '2': '\"',\r\n    '3': '№',\r\n    '4': ';',\r\n    '5': '%',\r\n    '6': ':',\r\n    '7': '?',\r\n    '8': '*',\r\n    '9': '(',\r\n    '-': '_',\r\n    '=': '+',\r\n    '[': '{',\r\n    ']': '}',\r\n    '\\\\': '/',\r\n    '.': ',',\r\n}\r\n\r\nconst getShiftValue = (lang, isCaps, isShift) => {\r\n    const symbolArr = lang  === 'EN' ?  specialsSimbolsEN : specialsSimbolsRU;\r\n    const keyboard__key  = document.querySelectorAll('.keyboard__key');\r\n    const shiftArr =  Array.from(keyboard__key).map(key => {\r\n        if(key.innerHTML.length > 3) return;\r\n        if(symbolArr[key.innerHTML.toString()] === '<') return key.innerHTML = \"<\";\r\n        if(symbolArr[key.innerHTML.toString()] === '>') return key.innerHTML = \">\";\r\n\r\n        if(symbolArr[key.innerHTML.toString()] !== undefined) return key.innerHTML = symbolArr[key.innerHTML.toString()];\r\n        if(key.classList.contains('lang')) return key.innerText.toString().toUpperCase();\r\n       return key.innerText =  isCaps && isShift ? key.innerText.toString().toLowerCase() : key.innerText.toString().toUpperCase();\r\n\r\n    })\r\n    return shiftArr;\r\n}\r\n\r\nexport default getShiftValue;","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Keyboard\\model\\audio.js",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":13,"column":22,"nodeType":"170","messageId":"171","endLine":13,"endColumn":35},{"ruleId":"172","severity":1,"message":"173","line":130,"column":12,"nodeType":"174","endLine":130,"endColumn":14,"suggestions":"175"},{"ruleId":"172","severity":1,"message":"176","line":41,"column":6,"nodeType":"174","endLine":41,"endColumn":8,"suggestions":"177"},{"ruleId":"172","severity":1,"message":"178","line":49,"column":8,"nodeType":"174","endLine":49,"endColumn":10,"suggestions":"179"},{"ruleId":"168","severity":1,"message":"180","line":30,"column":9,"nodeType":"170","messageId":"171","endLine":30,"endColumn":14},{"ruleId":"181","severity":1,"message":"182","line":218,"column":59,"nodeType":"183","messageId":"184","endLine":218,"endColumn":66},{"ruleId":"181","severity":1,"message":"182","line":249,"column":25,"nodeType":"183","messageId":"184","endLine":249,"endColumn":32},{"ruleId":"181","severity":1,"message":"182","line":256,"column":25,"nodeType":"183","messageId":"184","endLine":256,"endColumn":32},{"ruleId":"181","severity":1,"message":"182","line":261,"column":25,"nodeType":"183","messageId":"184","endLine":261,"endColumn":32},{"ruleId":"181","severity":1,"message":"185","line":47,"column":38,"nodeType":"183","messageId":"184","endLine":47,"endColumn":45},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"no-unused-vars","'setParameters' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'item.countryInfo.lat', 'item.countryInfo.long', and 'map'. Either include them or remove the dependency array.","ArrayExpression",["188"],"React Hook useEffect has a missing dependency: 'searchTerm'. Either include it or remove the dependency array.",["189"],"React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.",["190"],"'shift' is assigned a value but never used.","array-callback-return","Array.prototype.find() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","Array.prototype.map() expects a return value from arrow function.","no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [item.countryInfo.lat, item.countryInfo.long, map]",{"range":"197","text":"198"},"Update the dependencies array to be: [searchTerm]",{"range":"199","text":"200"},"Update the dependencies array to be: [map]",{"range":"201","text":"202"},[4340,4342],"[item.countryInfo.lat, item.countryInfo.long, map]",[1094,1096],"[searchTerm]",[1688,1690],"[map]"]