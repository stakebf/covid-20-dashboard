[{"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\index.js":"1","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\store\\index.js":"2","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\App\\index.js":"3","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\reducers\\index.js":"4","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\actions\\index.js":"5","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getProvinceMap.js":"6","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\actions\\actionTypes.js":"7","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\services\\WorldometrsService.js":"8","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\GlobalCases\\GlobalCases.jsx":"9","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\CasesByCity\\CasesContainer.jsx":"10","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MapContainer.jsx":"11","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tabs\\index.js":"12","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\AllKindsOfCases\\index.js":"13","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getStatistics.js":"14","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\GlobalCases\\SearchInput.jsx":"15","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\CasesByCity\\CasesItem.jsx":"16","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\Legend.jsx":"17","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MapProvider.jsx":"18","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getInfoAboutCountry.js":"19","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\countriesCoordinates.js":"20","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\tabsNames.js":"21","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MiniMap.jsx":"22","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Chart\\index.js":"23","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\chartHelpers.js":"24","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\chartConfig.js":"25","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\AppWrapper\\index.js":"26","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Header\\index.js":"27","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Footer\\index.js":"28","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\ErrorStub\\index.js":"29"},{"size":295,"mtime":1608735608182,"results":"30","hashOfConfig":"31"},{"size":604,"mtime":1608062054171,"results":"32","hashOfConfig":"31"},{"size":1079,"mtime":1608746561091,"results":"33","hashOfConfig":"31"},{"size":1744,"mtime":1608746223488,"results":"34","hashOfConfig":"31"},{"size":3369,"mtime":1608735670212,"results":"35","hashOfConfig":"31"},{"size":238,"mtime":1608062054169,"results":"36","hashOfConfig":"31"},{"size":672,"mtime":1608735670212,"results":"37","hashOfConfig":"31"},{"size":1513,"mtime":1608735670215,"results":"38","hashOfConfig":"31"},{"size":1577,"mtime":1608735608170,"results":"39","hashOfConfig":"31"},{"size":4568,"mtime":1608740820958,"results":"40","hashOfConfig":"31"},{"size":5334,"mtime":1608735608173,"results":"41","hashOfConfig":"31"},{"size":1850,"mtime":1608742439991,"results":"42","hashOfConfig":"31"},{"size":1911,"mtime":1608741978043,"results":"43","hashOfConfig":"31"},{"size":136,"mtime":1608735608181,"results":"44","hashOfConfig":"31"},{"size":1152,"mtime":1608745005310,"results":"45","hashOfConfig":"31"},{"size":2415,"mtime":1608746657526,"results":"46","hashOfConfig":"31"},{"size":1742,"mtime":1608735608172,"results":"47","hashOfConfig":"31"},{"size":2686,"mtime":1608735608175,"results":"48","hashOfConfig":"31"},{"size":1315,"mtime":1608735670211,"results":"49","hashOfConfig":"31"},{"size":26503,"mtime":1608735608185,"results":"50","hashOfConfig":"31"},{"size":176,"mtime":1608735608185,"results":"51","hashOfConfig":"31"},{"size":2422,"mtime":1608735608177,"results":"52","hashOfConfig":"31"},{"size":1210,"mtime":1608746604465,"results":"53","hashOfConfig":"31"},{"size":4520,"mtime":1608746764843,"results":"54","hashOfConfig":"31"},{"size":1431,"mtime":1608746774470,"results":"55","hashOfConfig":"31"},{"size":2095,"mtime":1608746476709,"results":"56","hashOfConfig":"31"},{"size":238,"mtime":1608746223461,"results":"57","hashOfConfig":"31"},{"size":760,"mtime":1608746223459,"results":"58","hashOfConfig":"31"},{"size":661,"mtime":1608746223458,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1d99sxb",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\index.js",[],["124","125"],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\store\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\App\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\reducers\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\actions\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getProvinceMap.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\redux\\actions\\actionTypes.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\services\\WorldometrsService.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\GlobalCases\\GlobalCases.jsx",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\CasesByCity\\CasesContainer.jsx",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MapContainer.jsx",["126"],"import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Popup, CircleMarker, useMap } from 'react-leaflet'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Legend from './Legend';\r\nimport MapProvider from './MapProvider';\r\nimport { getStatistics } from '../../../helpers/getStatistics';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './map.scss';\r\n\r\nlet index = 0;\r\nconst DEFAULT_LOCATION = [53.90033950661763, 27.562463259670654];\r\nconst ZOOM = 1.5;\r\n\r\nconst useStyles = makeStyles({\r\n    mapContainer: {\r\n        backgroundColor: 'beige',\r\n        margin: '0 auto',\r\n        marginBottom: '50px',\r\n        height: '80vh',\r\n        width: '100%',\r\n        gridColumn: '2'\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n});\r\n\r\nconst getColor = num => {\r\n    return num > 1000000\r\n        ? \"#BD0026\"\r\n        : num > 500000\r\n            ? \"#E31A1C\"\r\n            : num > 100000\r\n                ? \"#FC4E2A\"\r\n                : num > 50000\r\n                    ? \"#FD8D3C\"\r\n                    : num > 10000\r\n                        ? \"#FEB24C\"\r\n                        : num > 1000\r\n                            ? \"#dfdc15\"\r\n                            : \"#4ddb0b\";\r\n}\r\n\r\nfunction Map({ stat, cases, pickedCountry }) {\r\n    const coords = Object.keys(pickedCountry).length ? [pickedCountry.countryInfo.lat, pickedCountry.countryInfo.long] : DEFAULT_LOCATION;\r\n    const [isNewLocation, setIsNewLocation] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsNewLocation(true);\r\n    }, [pickedCountry]);\r\n\r\n    const classes = useStyles();\r\n    const fillOptions = (color) => {\r\n        return {\r\n            fillColor: color,\r\n            color: color,\r\n            fillOpacity: 0.5\r\n        }\r\n    };\r\n\r\n    function getStaticticsValue(item) {\r\n        const { category, timePeriod } = stat;\r\n        const statType = category === 'confirmed' ? 'cases' : category.toString();\r\n        let staticticValue = timePeriod.includes('today') ? item[`today${statType.charAt(0).toUpperCase() + statType.slice(1)}`] : item[statType];\r\n\r\n        if (timePeriod.includes('100')) {\r\n            staticticValue = getStatistics(staticticValue, item.population);\r\n        }\r\n\r\n        return staticticValue;\r\n    };\r\n\r\n    function renderProvinceMarker(item) {\r\n        const { category, timePeriod } = stat;\r\n        const center = [item.coordinates.latitude, item.coordinates.longitude];\r\n        let staticticValue = getStaticticsValue(item);\r\n        const backColor = getColor(staticticValue);\r\n        return <CircleMarker\r\n            eventHandlers={{\r\n                mouseover: (e) => {\r\n                    e.target.openPopup();\r\n                },\r\n                mouseout: (e) => {\r\n                    e.target.closePopup();\r\n                }\r\n            }}\r\n            center={center}\r\n            pathOptions={fillOptions(backColor)}\r\n            radius={1 * 5}\r\n            key={`${item.coordinates.latitude}_${++index}`}>\r\n            <Popup>\r\n                {`${category} ${timePeriod}`}:{item.stats[category]}\r\n                <br />\r\n                {pickedCountry.country}, {item.province}\r\n            </Popup>\r\n        </CircleMarker>\r\n    };\r\n\r\n    function renderCountryMarker(item, stat, idx, radius) {\r\n        const { category, timePeriod } = stat;\r\n        let staticticValue = getStaticticsValue(item);\r\n        const center = [item.countryInfo.lat, item.countryInfo.long];\r\n        const backColor = getColor(staticticValue);\r\n        return <CircleMarker\r\n            eventHandlers={{\r\n                mouseover: (e) => {\r\n                    e.target.openPopup();\r\n                },\r\n                mouseout: (e) => {\r\n                    e.target.closePopup();\r\n                }\r\n            }}\r\n\r\n            center={center}\r\n            pathOptions={fillOptions(backColor)}\r\n            radius={radius ? radius : 1 * 5}\r\n            key={++index}>\r\n            <Popup>\r\n                {`${category} ${timePeriod}`}:{staticticValue}\r\n                <br />\r\n                {item.country}\r\n            </Popup>\r\n        </CircleMarker>\r\n    };\r\n\r\n    function FlyToLocation({ item, stat }) {\r\n        const map = useMap();\r\n        useEffect(() => {\r\n            map.flyTo([item.countryInfo.lat, item.countryInfo.long], 5);\r\n            setIsNewLocation(false);\r\n        }, []);\r\n\r\n        return renderCountryMarker(item, stat, null, 10);\r\n    };\r\n\r\n    return (\r\n        < MapContainer className={classes.mapContainer} center={coords} minZoom={1} zoom={ZOOM} scrollWheelZoom={true}>\r\n            {Object.keys(pickedCountry).length && isNewLocation ? <FlyToLocation position={coords} item={pickedCountry} stat={stat} /> : null}\r\n            <MapProvider />\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n\r\n            {cases.map((item, idx) => {\r\n                if (item.provinces !== null) {\r\n                    return item.provinces.map((provence) => renderProvinceMarker(provence))\r\n                }\r\n                return renderCountryMarker(item, stat, idx)\r\n            })}\r\n            <Legend />\r\n        </MapContainer >\r\n    )\r\n}\r\n\r\nexport default React.memo(Map);\r\n","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tabs\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\AllKindsOfCases\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getStatistics.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\GlobalCases\\SearchInput.jsx",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\CasesByCity\\CasesItem.jsx",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\Legend.jsx",["127"],"import { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { useEffect } from \"react\";\r\nimport classes from './MapContainer.module.scss';\r\n\r\nconst Legend = () => {\r\n    const map = useMap();\r\n    console.log(map);\r\n\r\n    useEffect(() => {\r\n        const getColor = num => {\r\n            console.log(num > 10000, num, '800026')\r\n            return num > 1000000\r\n                ? \"#BD0026\"\r\n                : num > 500000\r\n                    ? \"#E31A1C\"\r\n                    : num > 100000\r\n                        ? \"#FC4E2A\"\r\n                        : num > 50000\r\n                            ? \"#FD8D3C\"\r\n                            : num > 10000\r\n                                ? \"#FEB24C\"\r\n                                : num > 1000\r\n                                    ? \"#dfdc15\"\r\n                                    : \"#4ddb0b\";\r\n        }\r\n\r\n        const legend = L.control({ position: \"bottomright\" });\r\n\r\n        legend.onAdd = () => {\r\n            const div = L.DomUtil.create(\"div\", \"info legend\");\r\n            const grades = [0, 1000, 10000, 50000, 100000, 500000, 1000000];\r\n            let labels = [];\r\n            let from;\r\n            let to;\r\n\r\n            for (let i = 0; i < grades.length; i++) {\r\n                from = grades[i];\r\n                to = grades[i + 1];\r\n                labels.push(\r\n                    `<div class=${classes.label__item}><span style=\"background:${getColor(from + 1)}\" class=${classes.label__color}></span><span> ${to ? to : +grades[i]}</span></div>`\r\n                );\r\n            }\r\n            div.innerHTML = labels.join(\"<br>\");\r\n            return div;\r\n        };\r\n\r\n        legend.addTo(map);\r\n    }, []);\r\n    return null;\r\n};\r\n\r\nexport default Legend;\r\n","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MapProvider.jsx",["128"],"import React from 'react';\r\nimport { LayersControl, TileLayer } from 'react-leaflet'\r\nimport MinimapControl from './MiniMap'\r\n\r\nconst MapProvider = () => {\r\n\r\n    return (\r\n        <LayersControl position=\"topright\">\r\n            <LayersControl.BaseLayer checked name=\"OpenStreetMap.Mapnik\">\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {/* <MinimapControl position=\"topright\" /> */}\r\n            </LayersControl.BaseLayer>\r\n            <LayersControl.BaseLayer name=\"OpenStreetMap.BlackAndWhite\">\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\r\n                />\r\n            </LayersControl.BaseLayer>\r\n            <LayersControl.BaseLayer name=\"OpenTopoMap\">\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\r\n                    url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\r\n                />\r\n            </LayersControl.BaseLayer>\r\n            <LayersControl.BaseLayer name=\"Stadia.AlidadeSmoothDark\">\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\r\n                    url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                />\r\n            </LayersControl.BaseLayer>\r\n            <LayersControl.BaseLayer name=\"Stamen.Toner\">\r\n                <TileLayer\r\n                    attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    subdomains='abcd'\r\n                    minZoom='0'\r\n                    maxZoom='20'\r\n                    url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}{r}.png\"\r\n                />\r\n            </LayersControl.BaseLayer>\r\n        </LayersControl>\r\n    )\r\n}\r\n\r\n\r\nexport default MapProvider;","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\getInfoAboutCountry.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\countriesCoordinates.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\tabsNames.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Tables\\Map\\MiniMap.jsx",["129","130"],"import React, { useState, useCallback, useMemo } from 'react';\r\nimport { MapContainer, TileLayer, useMapEvent, Rectangle, useMapEvents, useMap } from 'react-leaflet'\r\n\r\nconst POSITION_CLASSES = {\r\n    bottomleft: 'leaflet-bottom leaflet-left',\r\n    bottomright: 'leaflet-bottom leaflet-right',\r\n    topleft: 'leaflet-top leaflet-left',\r\n    topright: 'leaflet-top leaflet-right',\r\n  }\r\n  \r\n  const BOUNDS_STYLE = { weight: 1 }\r\n  \r\n  function MinimapBounds({ parentMap, zoom }) {\r\n    const minimap = useMap()\r\n  \r\n    // Clicking a point on the minimap sets the parent's map center\r\n    const onClick = useCallback(\r\n      (e) => {\r\n        parentMap.setView(e.latlng, parentMap.getZoom())\r\n      },\r\n      [parentMap],\r\n    )\r\n    useMapEvent('click', onClick)\r\n  \r\n    // Keep track of bounds in state to trigger renders\r\n    const [bounds, setBounds] = useState(parentMap.getBounds())\r\n    const onChange = useCallback(() => {\r\n      setBounds(parentMap.getBounds())\r\n      // Update the minimap's view to match the parent map's center and zoom\r\n      minimap.setView(parentMap.getCenter(), zoom)\r\n    }, [minimap, parentMap, zoom])\r\n  \r\n    // Listen to events on the parent map\r\n    const handlers = useMemo(() => ({ move: onChange, zoom: onChange }), [])\r\n    useMapEvents({ instance: parentMap }, handlers)\r\n  \r\n    return <Rectangle bounds={bounds} pathOptions={BOUNDS_STYLE} />\r\n  }\r\n  \r\n  function MinimapControl({ position, zoom }) {\r\n    const parentMap = useMap()\r\n    const mapZoom = zoom || 0\r\n  \r\n    // Memoize the minimap so it's not affected by position changes\r\n    const minimap = useMemo(\r\n      () => (\r\n        <MapContainer\r\n          style={{ height: 80, width: 80 }}\r\n          center={parentMap.getCenter()}\r\n          zoom={mapZoom}\r\n          dragging={false}\r\n          doubleClickZoom={false}\r\n          scrollWheelZoom={false}\r\n          attributionControl={false}\r\n          zoomControl={false}>\r\n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n          <MinimapBounds parentMap={parentMap} zoom={mapZoom} />\r\n        </MapContainer>\r\n      ),\r\n      [],\r\n    )\r\n  \r\n    const positionClass =\r\n      (position && POSITION_CLASSES[position]) || POSITION_CLASSES.topright\r\n    return (\r\n      <div className={positionClass}>\r\n        <div className=\"leaflet-control leaflet-bar\">{minimap}</div>\r\n      </div>\r\n    )\r\n  }\r\n  export default MinimapControl;","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Chart\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\helpers\\chartHelpers.js",["131"],"import { caseCalculationFormula } from './getInfoAboutCountry';\r\n\r\nconst convertData = (data, is100K, population) => {\r\n  return data.map((item, idx) => {\r\n    let currentItem;\r\n    if (idx === 0) {\r\n      currentItem = 0;\r\n    } else {\r\n      currentItem = item - data[idx - 1];\r\n      currentItem = currentItem < 0 ? 0 : currentItem;\r\n\r\n      if (is100K) {\r\n        currentItem = (caseCalculationFormula(item, population) - caseCalculationFormula(data[idx - 1], population)).toFixed(2);\r\n        currentItem = currentItem < 0 ? 0 : currentItem;\r\n      }\r\n    }\r\n    return currentItem;\r\n  })\r\n}\r\n\r\nconst setChartAxis = (dates, cases, deaths, recovered, population) => {\r\n  const data = {\r\n    labels: dates,\r\n    datasets: [\r\n      {\r\n        label: 'cases/total',\r\n        data: cases,\r\n        fill: false,\r\n        backgroundColor: 'darkgreen',\r\n        borderColor: 'darkgreen',\r\n        yAxisID: 'y-axis-1',\r\n      },\r\n      {\r\n        label: 'cases/today',\r\n        data: convertData(cases),\r\n        fill: false,\r\n        backgroundColor: 'green',\r\n        borderColor: 'green',\r\n        yAxisID: 'y-axis-1',\r\n<<<<<<< HEAD\r\n=======\r\n        hidden: true,\r\n>>>>>>> 0ccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\r\n      },\r\n      {\r\n        label: 'cases/total/100K',\r\n        data: convertData(cases, true, population),\r\n        fill: false,\r\n        backgroundColor: '#adff2f',\r\n        borderColor: '#adff2f',\r\n        yAxisID: 'y-axis-1',\r\n<<<<<<< HEAD\r\n=======\r\n        hidden: true,\r\n>>>>>>> 0ccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\r\n      },\r\n      {\r\n        label: 'cases/today/100K',\r\n        data: convertData(convertData(cases), true, population),\r\n        fill: false,\r\n        backgroundColor: '#14f714',\r\n        borderColor: '#14f714',\r\n        yAxisID: 'y-axis-1',\r\n<<<<<<< HEAD\r\n=======\r\n        hidden: true,\r\n>>>>>>> 0ccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\r\n      },\r\n      {\r\n        label: 'deaths/total',\r\n        data: deaths,\r\n        fill: false,\r\n        backgroundColor: 'darkred',\r\n        borderColor: 'darkred',\r\n        yAxisID: 'y-axis-1',\r\n      },\r\n      {\r\n        label: 'deaths/today',\r\n        data: convertData(deaths),\r\n        fill: false,\r\n        backgroundColor: 'red',\r\n        borderColor: 'red',\r\n        yAxisID: 'y-axis-1',\r\n<<<<<<< HEAD\r\n=======\r\n        hidden: true,\r\n>>>>>>> 0ccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\r\n      },\r\n      {\r\n        label: 'deaths/total/100K',\r\n        data: convertData(deaths, true, population),\r\n        fill: false,\r\n        backgroundColor: 'indianred',\r\n        borderColor: 'indianred',\r\n        yAxisID: 'y-axis-1',\r\n<<<<<<< HEAD\r\n=======\r\n        hidden: true,\r\n>>>>>>> 0ccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\r\n      },\r\n      {\r\n        label: 'deaths/today/100K',\r\n        data: convertData(convertData(deaths), true, population),\r\n        fill: false,\r\n        backgroundColor: 'palevioletred',\r\n        borderColor: 'palevioletred',\r\n        yAxisID: 'y-axis-1',\r\n<<<<<<< HEAD\r\n=======\r\n        hidden: true,\r\n>>>>>>> 0ccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\r\n      },\r\n      {\r\n        label: 'recovered/total',\r\n        data: recovered,\r\n        fill: false,\r\n        backgroundColor: 'darkblue',\r\n        borderColor: 'darkblue',\r\n        yAxisID: 'y-axis-1',\r\n      },\r\n      {\r\n        label: 'recovered/today',\r\n        data: convertData(recovered),\r\n        fill: false,\r\n        backgroundColor: 'blue',\r\n        borderColor: 'blue',\r\n        yAxisID: 'y-axis-1',\r\n        hidden: true,\r\n      },\r\n      {\r\n        label: 'recovered/total/100K',\r\n        data: convertData(recovered, true, population),\r\n        fill: false,\r\n        backgroundColor: 'cadetblue',\r\n        borderColor: 'cadetblue',\r\n        yAxisID: 'y-axis-1',\r\n<<<<<<< HEAD\r\n=======\r\n        hidden: true,\r\n>>>>>>> 0ccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\r\n      },\r\n      {\r\n        label: 'recovered/today/100K',\r\n        data: convertData(convertData(recovered), true, population),\r\n        fill: false,\r\n        backgroundColor: 'dodgerblue',\r\n        borderColor: 'dodgerblue',\r\n        yAxisID: 'y-axis-1',\r\n<<<<<<< HEAD\r\n=======\r\n        hidden: true,\r\n>>>>>>> 0ccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\r\n      },\r\n    ],\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nconst prepareCountiesData = (data, population) => {\r\n  const dates = [];\r\n  const cases = [];\r\n  Object.entries(data.cases).forEach(([key, value]) => {\r\n    cases.push(value);\r\n    dates.push(key);\r\n  });\r\n\r\n  const deaths = Object.values(data.deaths);\r\n  const recovered = Object.values(data.recovered);\r\n\r\n  return setChartAxis(dates, cases, deaths, recovered, population);\r\n}\r\n\r\nconst getCountriesData = (\r\n    byHistoricalAll, \r\n    byHistoricalCountry,\r\n    activeCountry,\r\n    byAllCases\r\n) => {\r\n  const data = Object.keys(byHistoricalCountry).length && !byHistoricalCountry.message ? byHistoricalCountry.timeline : byHistoricalAll;\r\n  const population = Object.keys(byHistoricalCountry).length && !byHistoricalCountry.message ? activeCountry.population : byAllCases.population;\r\n\r\n  return prepareCountiesData(data, population);\r\n}\r\n\r\nexport { getCountriesData };\r\n","E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\models\\chartConfig.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\AppWrapper\\index.js",["132","133"],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Header\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\Footer\\index.js",[],"E:\\masha\\rss2020\\covid\\covid-20-dashboard\\src\\components\\ErrorStub\\index.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":131,"column":12,"nodeType":"140","endLine":131,"endColumn":14,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":49,"column":8,"nodeType":"140","endLine":49,"endColumn":10,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":3,"column":8,"nodeType":"146","messageId":"147","endLine":3,"endColumn":22},{"ruleId":"138","severity":1,"message":"148","line":34,"column":74,"nodeType":"140","endLine":34,"endColumn":76,"suggestions":"149"},{"ruleId":"138","severity":1,"message":"150","line":60,"column":7,"nodeType":"140","endLine":60,"endColumn":9,"suggestions":"151"},{"ruleId":null,"fatal":true,"severity":2,"message":"152","line":40,"column":1},{"ruleId":"144","severity":1,"message":"153","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":19},{"ruleId":"144","severity":1,"message":"154","line":15,"column":22,"nodeType":"146","messageId":"147","endLine":15,"endColumn":35},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'item.countryInfo.lat', 'item.countryInfo.long', and 'map'. Either include them or remove the dependency array.","ArrayExpression",["157"],"React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.",["158"],"no-unused-vars","'MinimapControl' is defined but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'onChange'. Either include it or remove the dependency array.",["159"],"React Hook useMemo has missing dependencies: 'mapZoom' and 'parentMap'. Either include them or remove the dependency array.",["160"],"Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 38 | \u001b[39m        borderColor\u001b[33m:\u001b[39m \u001b[32m'green'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 39 | \u001b[39m        yAxisID\u001b[33m:\u001b[39m \u001b[32m'y-axis-1'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 40 | \u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<\u001b[39m \u001b[33mHEAD\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m\u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 41 | \u001b[39m\u001b[33m===\u001b[39m\u001b[33m===\u001b[39m\u001b[33m=\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 42 | \u001b[39m        hidden\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 43 | \u001b[39m\u001b[33m>>>\u001b[39m\u001b[33m>>>\u001b[39m\u001b[33m>\u001b[39m \u001b[35m0\u001b[39mccf95f5bd8ec6eabb8ed9f6aa38b3db169894ca\u001b[0m","'Container' is defined but never used.","'setParameters' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [item.countryInfo.lat, item.countryInfo.long, map]",{"range":"169","text":"170"},"Update the dependencies array to be: [map]",{"range":"171","text":"172"},"Update the dependencies array to be: [onChange]",{"range":"173","text":"174"},"Update the dependencies array to be: [mapZoom, parentMap]",{"range":"175","text":"176"},[4355,4357],"[item.countryInfo.lat, item.countryInfo.long, map]",[1688,1690],"[map]",[1225,1227],"[onChange]",[2062,2064],"[mapZoom, parentMap]"]